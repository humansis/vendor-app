include:
  - project: 'humansis/gitlab-ci-templates'
    ref: 'mobile/docker-ci'
    file: 'src/mobile/gradle.template.yml'
  - project: 'humansis/gitlab-ci-templates'
    ref: 'mobile/docker-ci'
    file: 'src/mobile/aws-upload.template.yml'

image: artifactory.quanti.cz/docker/builder-android:v2

# todo: versioning
variables:
  ARTIFACT_PATH: ./src/vendor_app/app/build/outputs/apk/*/vendor-app-*.apk
  ARTIFACT_DEBUG_PATH: ./src/vendor_app/app/build/outputs/apk/*/vendor-app-*debug.apk
  ARTIFACT_RELEASE_PATH: ./src/vendor_app/app/build/outputs/apk/*/vendor-app-*release.apk
  ARTIFACT_BUNDLE_PATH: ./src/vendor_app/app/build/outputs/bundle/*/vendor-app-*.aab
  EMULATOR_TIMEOUT: "60"

stages:
  - prepare
  - build
  - archive
  - upload
  - firebase
  - publish
  - upload_aws

.gradle_build:
  before_script:
    - export PATH=$PATH:$ANDROID_SDK/platform-tools
    - cd ./src/vendor_app
    - envsubst < ./gradle.properties.template > ./gradle.properties
    - envsubst < ./app/google-services-template.json > ./app/google-services.json
    - mkdir -p ./app/keystore
    - echo $BASE64_RELEASE_KEYSTORE | base64 -d > ./app/keystore/release.keystore
    - echo $BASE64_DEBUG_KEYSTORE | base64 -d > ./app/keystore/debug.keystore
    - echo $FIREBASE_APP_DISTRIBUTION_ADMIN | base64 -d > ./app/adc.json;
      export GOOGLE_APPLICATION_CREDENTIALS=./app/adc.json;
    - ./gradlew clean

before_build:
  stage: prepare
  extends: .gradle_build
  script:
    - sudo gem update fastlane

ktlint:
  stage: prepare
  extends: .gradle_build
  script:
    - echo "ktlint"
    - ./gradlew ktlint

# Just build application
build_debug_job:
  stage: build
  extends: .gradle_build
  script:
    - ./gradlew assembleDebug

# Just build application
build_release_job:
  stage: build
  extends: .gradle_build
  script:
    - ./gradlew assembleRelease

# Build debug and archive apk
archive_debug_job:
  stage: archive
  extends: .gradle_build
  script:
    - ./gradlew :app:assembleDebug
  when: manual
  except:
    - tags
  artifacts:
    when: always
    expire_in: 4 week
    paths:
      - $ARTIFACT_PATH

# Build release and archive apk
archive_release_job:
  stage: archive
  extends: .gradle_build
  script:
    - ./gradlew :app:assembleRelease
  when: manual
  except:
    - tags
  artifacts:
    when: always
    expire_in: 4 week
    paths:
      - $ARTIFACT_PATH


# Build debug and archive apk
archive_debug_job_automatically:
  stage: archive
  extends: .gradle_build
  script:
    - ./gradlew :app:assembleDebug
  only:
    - tags
  artifacts:
    when: always
    expire_in: 4 week
    paths:
      - $ARTIFACT_PATH

# Build debug and archive apk
archive_release_job_automatically:
  stage: archive
  extends: .gradle_build
  script:
    - ./gradlew :app:assembleRelease
  only:
    - tags
  artifacts:
    when: always
    expire_in: 4 week
    paths:
      - $ARTIFACT_PATH

upload_to_artifactory:
  stage: upload
  variables:
    ARTIFACTORY_REPOSITORY: /vendor_app-gradle-local/
  extends: .upload_gradle
  except:
    - tags
  when: manual

upload_to_artifactory_automatically:
  stage: upload
  variables:
    ARTIFACTORY_REPOSITORY: /vendor_app-gradle-local/
  extends: .upload_gradle
  only:
    - tags

upload_to_firebase:
  stage: firebase
  extends: .gradle_build
  script:
    - MESSAGES=$(git log -5 --pretty=format:'%h %s')
    - RELEASE_NOTES=$(echo -e "$CI_COMMIT_REF_NAME\n$MESSAGES")
    - ./gradlew --build-cache clean
        app:assembleDebug app:appDistributionUploadDebug -PappTesterReleaseNotes="$RELEASE_NOTES"
  when: manual
  except:
    - tags      

upload_to_firebase_automatically_tags:
  stage: firebase
  extends: .gradle_build
  script:
    - MESSAGES=$(git log -5 --pretty=format:'%h %s')
    - RELEASE_NOTES=$(echo -e "$CI_COMMIT_REF_NAME\n$MESSAGES")
    - ./gradlew --build-cache clean
        app:assembleDebug app:appDistributionUploadDebug -PappTesterReleaseNotes="$RELEASE_NOTES"
  only:
    - tags

upload_to_firebase_automatically_merge:
  stage: firebase
  extends: .gradle_build
  script:
    - MESSAGES=$(git log -5 --pretty=format:'%h %s')
    - RELEASE_NOTES=$(echo -e "$CI_COMMIT_REF_NAME\n$MESSAGES")
    - ./gradlew --build-cache clean
        app:assembleDebug app:appDistributionUploadDebug -PappTesterReleaseNotes="$RELEASE_NOTES"   
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_TITLE =~ /Merge branch.*/

# Build release and archive bundle automatically
archive_release_bundle_job_automatically:
  stage: publish
  extends: .gradle_build
  script:
    - ./gradlew :app:bundleRelease
  only:
    - tags
  artifacts:
    when: always
    expire_in: 4 week
    paths:
      - $ARTIFACT_BUNDLE_PATH    

publish_to_playstore:
  stage: publish
  extends: .gradle_build
  script:
    - echo $BASE64_PLAYSTORE_API_KEY | base64 -d > $PLAYSTORE_API_KEY_PATH;
    - export PATH=$PATH:/root/.local/share/gem/ruby/2.7.0/bin;
      gem install bundler;
      bundle update --bundler;
      bundle install;
    - bundle exec fastlane deploy json_key:$PLAYSTORE_API_KEY_PATH
  after_script:
    - rm -rf $PLAYSTORE_API_KEY_PATH
  when: manual
  only:
    - tags

upload_release_candidate:
  stage: upload_aws
  variables:
    APP_NAME: vendor-app
    APK: $ARTIFACT_DEBUG_PATH
  extends: .release_rc
  when: manual
  environment:
    name: aws-rc
  except:
    - tags

upload_stable_release:
  stage: upload_aws
  variables:
    APP_NAME: vendor-app
    APK: $ARTIFACT_RELEASE_PATH
  extends: .release_stable
  when: always
  environment:
    name: aws-stable
  only:
    - tags

upload_stable_debug:
  stage: upload_aws
  variables:
    APP_NAME: vendor-app
    APK: $ARTIFACT_DEBUG_PATH
  extends: .release_stable_debug
  when: always
  environment:
    name: aws-debug
  only:
    - tags    
