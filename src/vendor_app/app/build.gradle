plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'jacoco'
}

apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    flatDir {
        dirs 'libs'
    }
}

configurations {
    ktlint
}

android {
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileSdkVersion compile_sdk_version

    defaultConfig {
        applicationId "cz.quanti.android.vendor_app"
        minSdkVersion min_sdk_version
        targetSdkVersion target_version
        versionCode 1
        versionName "1.1.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "MASTER_KEY", "\"$MASTER_KEY\""
        buildConfigField "String", "APP_ID", "\"$APP_ID\""
        buildConfigField "short", "APP_VESION", "$APP_VERSION"

        buildConfigField "String", "API_URL", "\"$API_URL\""
        buildConfigField "String", "FRONT_API_URL", "\"$FRONT_API_URL\""
        buildConfigField "String", "DEMO_API_URL", "\"$DEMO_API_URL\""
        buildConfigField "String", "STAGE_API_URL", "\"$STAGE_API_URL\""
        buildConfigField "String", "TEST_API_URL", "\"$TEST_API_URL\""
        buildConfigField "String", "DEV_API_URL", "\"$DEV_API_URL\""
    }

    signingConfigs {
        release {
            storeFile file("$RELEASE_STORE_FILE_PATH")
            keyAlias "$RELEASE_STORE_KEY_ALIAS"
            storePassword "$RELEASE_STORE_PASSWORD"
            keyPassword "$RELEASE_STORE_KEY_PASSWORD"
        }
        debug {
            storeFile file("$DEBUG_STORE_FILE_PATH")
            keyAlias "$DEBUG_STORE_KEY_ALIAS"
            storePassword "$DEBUG_STORE_PASSWORD"
            keyPassword "$DEBUG_STORE_KEY_PASSWORD"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "environment"

    productFlavors {

        prod {
            dimension "environment"
            buildConfigField "String", "RELEASE_API_URL", "\"$PROD_RELEASE_API_URL\""
        }

        demo {
            dimension "environment"
            applicationIdSuffix ".demo"
            buildConfigField "String", "RELEASE_API_URL", "\"$DEMO_RELEASE_API_URL\""
        }
    }

    sourceSets {
        main { java.srcDirs = ['src/main/java', 'src/main/kotlin'] }
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources true
        }
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    //ktlint
    ktlint "com.pinterest:ktlint:0.35.0"

    //analytics
    implementation 'com.google.firebase:firebase-analytics:17.5.0'


    // Add the Firebase SDK for Crashlytics.
    implementation 'com.google.firebase:firebase-crashlytics:17.2.1'

    implementation project(':core')
    implementation "com.github.Qase:KotlinLogger:$kotlin_logger_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Android
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    // RX
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'


    // Koin
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    //Scanner
    implementation 'com.budiyev.android:code-scanner:2.1.0'

    //Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Architecture Components - Room
    api 'androidx.room:room-runtime:2.2.4'
    api 'androidx.room:room-rxjava2:2.2.4'
    kapt 'androidx.room:room-compiler:2.2.4'

    // Test
    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    testImplementation "androidx.test.ext:junit:$androidx_junit_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_junit_version"
    androidTestImplementation "androidx.test:runner:$runner_version"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

jacoco {
    toolVersion "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    description 'Generate code coverage.'
    group 'Verification'

    reports {
        xml.enabled false
        csv.enabled false
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    classDirectories.from = files([debugTree])
    sourceDirectories.from = files([mainSrc])
    executionData.from = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec'])
}
