plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlinx-serialization'
    id 'jacoco'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'
    id 'com.google.firebase.crashlytics'
}

// ****************** CONFIGURATION ************************ ////

def gitVersionCode = { boolean isFileName ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', 'HEAD', '--count'
        standardOutput = stdout
    }

    def count = stdout.toString().trim().toInteger()

    if (!isFileName)  {
        // Ugly code that needs to be here because previous devs create high version code in google play
        count+=2001000
    }

    println count
    return count
}

def VERSION_MAJOR = 3
def VERSION_MINOR = 8
def VERSION_PATCH = 0


String APK_NAME = "vendor-app"
String VERSION_NAME = "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
String BUILD_NUMBER = "${gitVersionCode(true)}"
String VERSION_FULL_NAME_FILE = "${APK_NAME}-${VERSION_NAME}.${gitVersionCode(true)}"


repositories {
    google()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    ktlint
}

android {
    kotlinOptions {
        jvmTarget = "11"
    }
    compileSdkVersion compile_sdk_version

    ndkVersion "21.3.6528147"

    defaultConfig {
        applicationId "cz.quanti.android.vendor_app"
        minSdkVersion min_sdk_version
        targetSdkVersion target_version
        versionCode gitVersionCode(false)
        versionName VERSION_NAME
        setProperty("archivesBaseName", VERSION_FULL_NAME_FILE)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "MASTER_KEY", "\"$MASTER_KEY\""
        buildConfigField "String", "APP_ID", "\"$APP_ID\""
        buildConfigField "short", "APP_VERSION", "$APP_VERSION"

        buildConfigField "String", "API_URL", "\"$API_URL\""
        buildConfigField "String", "FRONT_API_URL", "\"$FRONT_API_URL_NEW\""
        buildConfigField "String", "DEMO_API_URL", "\"$DEMO_API_URL\""
        buildConfigField "String", "STAGE_API_URL", "\"$STAGE_API_URL_NEW\""
        buildConfigField "String", "TEST_API_URL", "\"$TEST_API_URL\""
        buildConfigField "String", "DEV1_API_URL", "\"$DEV1_API_URL\""
        buildConfigField "String", "DEV2_API_URL", "\"$DEV2_API_URL\""
        buildConfigField "String", "DEV3_API_URL", "\"$DEV3_API_URL\""
        buildConfigField "String", "LOCAL_API_URL", "\"$LOCAL_API_URL\""

        buildConfigField "String", "DEMO_ACCOUNT", "\"$DEMO_ACCOUNT\""
        buildConfigField "String", "RELEASE_API_URL", "\"$PROD_RELEASE_API_URL\""
        buildConfigField "short", "BUILD_NUMBER", "$BUILD_NUMBER"

        def currentAppTesterReleaseNotes
        if (project.hasProperty("appTesterReleaseNotes")) {
            currentAppTesterReleaseNotes = "$appTesterReleaseNotes"
        } else {
            currentAppTesterReleaseNotes = "Built from gradle"
        }

        firebaseAppDistribution {
            releaseNotes = currentAppTesterReleaseNotes
            groups="quanti-android-testers, pin-testers"
        }
    }

    signingConfigs {
        release {
            storeFile file("$RELEASE_STORE_FILE_PATH")
            keyAlias "$RELEASE_STORE_KEY_ALIAS"
            storePassword "$RELEASE_STORE_PASSWORD"
            keyPassword "$RELEASE_STORE_KEY_PASSWORD"
        }
        debug {
            storeFile file(DEBUG_STORE_FILE_PATH)
            keyAlias DEBUG_STORE_KEY_ALIAS
            storePassword DEBUG_STORE_PASSWORD
            keyPassword DEBUG_STORE_KEY_PASSWORD
        }
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main { java.srcDirs = ['src/main/java', 'src/main/kotlin'] }
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    // ktlint
    ktlint "com.pinterest:ktlint:0.35.0"

    //analytics
    implementation 'com.google.firebase:firebase-analytics:19.0.0'

    // NFC Library
    implementation "cz.quanti.android:nfc:$nfc_library_version"

    // Logger
    implementation "com.github.Qase:KotlinLogger:$kotlin_logger_version"

    // Add the Firebase SDK for Crashlytics.
    implementation 'com.google.firebase:firebase-crashlytics:18.2.1'

    implementation project(':core')

    // Android
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"
    implementation "com.google.android.material:material:1.4.0"

    // RX
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.3'

    // Koin
    implementation "io.insert-koin:koin-android:$koin_version"

    // Scanner
    // implementation 'com.budiyev.android:code-scanner:2.1.0' // TODO uncomment after it is available on mavenCentral
    implementation 'com.github.yuriy-budiyev:code-scanner:2.1.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    // Architecture Components - Room
    api 'androidx.room:room-runtime:2.3.0'
    api 'androidx.room:room-rxjava2:2.3.0'
    kapt 'androidx.room:room-compiler:2.3.0'

    // JSON serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1"

    // Test
    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    testImplementation "androidx.test.ext:junit:$androidx_junit_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_junit_version"
    androidTestImplementation "androidx.test:runner:$runner_version"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

jacoco {
    toolVersion "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    description 'Generate code coverage.'
    group 'Verification'

    reports {
        xml.enabled false
        csv.enabled false
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    classDirectories.from = files([debugTree])
    sourceDirectories.from = files([mainSrc])
    executionData.from = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec'])
}
